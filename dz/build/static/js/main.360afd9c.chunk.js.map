{"version":3,"sources":["logo.svg","App.jsx","serviceWorker.js","components/MoneyBlock/MoneyBlock.jsx","pages/mainPage.jsx","index.js"],"names":["module","exports","App","className","src","logo","alt","Boolean","window","location","hostname","match","MoneyBlock","props","state","values","keys","fetch","then","res","json","result","setState","rates","Object","error","this","map","key","toFixed","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,iMCiB5BC,MAbf,WACE,OACE,6BACE,4BAAQC,UAAU,OAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,qHACA,yBAAKH,UAAW,mBCEJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCwBSC,G,wDArCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,OAAQ,GACRC,KAAM,IAJI,E,gEAQE,IAAD,OACfC,MAAM,mDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKC,SAAS,CACVP,OAAQM,EAAOE,MACfP,KAAMQ,OAAOR,KAAKK,EAAOE,YAGjC,SAACE,S,+BAKC,IAAD,EACkBC,KAAKZ,MAArBC,EADF,EACEA,OAAQC,EADV,EACUA,KACf,OACI,4BACKA,EAAKW,KAAI,SAAAC,GAAG,OACT,yBAAKzB,UAAU,cACX,uBAAGA,UAAU,QAAb,wCAA4ByB,EAA5B,OAAqCA,EAArC,QAA+C,EAAEb,EAAOa,IAAMC,QAAQ,GAAtE,iB,GA/BCC,IAAMC,YCCRD,IAAMC,UCI7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjB,GACLkB,QAAQlB,MAAMA,EAAMmB,c","file":"static/js/main.360afd9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b9122894.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <header className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <h1>Конвертер валют</h1>\n        <div className= \"headerBlock\">\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport './MoneyBlock.css'\r\n\r\nclass MoneyBlock extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            values: {},\r\n            keys: []\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://api.exchangeratesapi.io/latest?base=RUB\")\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                this.setState({\r\n                    values: result.rates,\r\n                    keys: Object.keys(result.rates)\r\n                });\r\n            },\r\n            (error) => {\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {values, keys} = this.state;\r\n        return (\r\n            <ul>\r\n                {keys.map(key => (\r\n                    <div className=\"moneyBlock\">\r\n                        <p className=\"text\">Валюта {key}: 1 {key} -> {(1/values[key]).toFixed(2)} RUB</p>\r\n                    </div>\r\n                ))}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoneyBlock;","import React from 'react'\r\nimport MoneyBlock from '../components/MoneyBlock/MoneyBlock.jsx';\r\n\r\n\r\nclass MainPage extends React.Component {\r\n    render() {\r\n        return(\r\n            <MoneyBlock />\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport MoneyBlock from './components/MoneyBlock/MoneyBlock';\nimport MainPage from './pages/mainPage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <MoneyBlock />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}